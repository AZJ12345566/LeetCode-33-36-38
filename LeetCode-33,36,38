class Solution {
/*
33.搜索旋转排序数组
整数数组 nums 按升序排列，数组中的值 互不相同 。
在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。
给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。
你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
*/
  public int search(int[] nums, int target) {
    if(nums.length == 0) {
      return -1;
    }
    if(nums.length == 1) {
      return nums[0] == target ? 0 : -1;
    }
    int left = 0;
    int right = nums.length - 1;
    while(left <= right) {
      int mid = (left + right) >>> 1;
      if(nums[mid] == target) {
        return mid;
      }
      if(nums[0] <= nums[mid]) {
        if(nums[0] <= target && target < nums[mid]) {
          right = mid - 1;
        } else {
            left = mid + 1;
        }
      } else {
          if(nums[mid] < target && target <= nums[nums.length - 1]) {
            left = mid + 1;
          } else {
            right = mid - 1;
          }
      }
    }
    return -1;
  }
/*
36.有效的数独
请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
注意：
一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
空白格用 '.' 表示。
*/
  public boolean isValidSudoku(char[][] board) {
    int[][] rows = new int[9][9];
    int[][] columns = new int[9][9];
    int[][][] subboxes = new int[3][3][9];
    for(int i = 0; i < 9; i++) {
      for(int j = 0; j < 9; j++) {
        char c = board[i][j];
        if(c != '.') {
          int index = c - '0' - 1;
          rows[i][index]++;
          columns[j][index]++;
          subboxes[i / 3][j / 3][index]++;
          if(rows[i][index] > 1 || columns[j][index] > 1 || subboxes[i / 3][j / 3][index] > 1) {
            return false;
          }
        }
      }
    }
    return true;
  }
/*
38.外观数列
给定一个正整数 n ，输出外观数列的第 n 项。
「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。
你可以将其视作是由递归公式定义的数字字符串序列：
countAndSay(1) = "1"
countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。
前五项如下：
1.     1
2.     11
3.     21
4.     1211
5.     111221
第一项是数字 1 
描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 "11"
描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 "21"
描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 "1211"
描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 "111221"
要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。
*/
  public String countAndSay(int n) {
    String str = "1";
    for(int i = 2; i <= n; i++) {
      StringBuilder sb = new StringBuilder();
      int start = 0;
      int pos = 0;
      while(pos < str.length()) {
        while(pos < str.length() && str.charAt(pos) == str.charAt(start)) {
          pos++;
        }
        sb.append((pos - start)).append(str.charAt(start));
        start = pos;
      }
      str = sb.toString();
    }
    return str;
  }
}
